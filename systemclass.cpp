//
// FileName : systemclass.cpp
//
#include "systemclass.h"

//
// CLASS FUNCTION
//

// 생성자
SystemClass::SystemClass()
{
	m_Input = 0;
	m_Graphics = 0;
}

// 복사 생성자
SystemClass::SystemClass(const SystemClass& other)
{
}

// 소멸자
SystemClass::~SystemClass()
{
}

// 생성
bool SystemClass::Initialize()
{
	int  screenWidth, screenHeight;
	bool result;


	// 함수에 높이와 너비를 전달하기 전에 변수를 0으로 초기화
	screenWidth = 0;
	screenHeight = 0;

	// 윈 API사용하여 초기화
	InitiallzeWindows(screenWidth, screenHeight);

	// Input 객체 생성. 유저로부터 들어오는 키보드 입력을 받기 위해 생성
	m_Input = new InputClass;
	if (!m_Input)
	{
		return false;
	}

	// Input 객체를 초기화
	m_Input->Initialize();

	// graphics 객체를 생성. 이 어플리케이션의 모든 그래픽을 처기하기 위해 생성
	m_Graphics = new GraphicsClass;
	if (!m_Graphics)
	{
		return false;
	}

	// Graphics 객체를 초기화
	result = m_Graphics->Initialize(screenWidth, screenHeight, m_hwnd);
	if (!result)
	{
		return false;
	}

	return true;
}

// 종료
void SystemClass::Shutdown()
{
	// Graphics 객체를 반환
	if (m_Graphics)
	{
		m_Graphics->Shutdown();
		delete m_Graphics;
		m_Graphics = 0;
	}

	// Input 객체를 반환
	if (m_Input)
	{
		delete m_Input;
		m_Input = 0;
	}

	// 창을 종료
	ShutdownWindows();

	return;
}

// 실행
void SystemClass::Run()
{
	MSG msg;
	bool done, result;


	// 메세지 구조체를 초기화
	ZeroMemory(&msg, sizeof(MSG));

	// 유저로 부터 종료 메세지를 받을 때 까지 루프
	done = false;
	while (!done)
	{
		// 윈도우 메세지를 처리
		if (PeekMessage(&msg, NULL, 0, 0, PM_REMOVE))
		{
			TranslateMessage(&msg);
			DispatchMessage(&msg);
		}

		// 윈도우에서 어플리케이션의 종료를 요청하는 경우 루프 탈출
		if (msg.message == WM_QUIT)
		{
			done = true;
		}
		else
		{
			result = Frame();
			if (!result)
			{
				done = true;
			}
		}
	}

	return;
}

// 매 프레임마다 실행
bool SystemClass::Frame()
{
	bool result;


	// 유저가 Esc키를눌러 어플리케이션을 종료하기를 원하는지 확인
	if (m_Input->IsKeyDown(VK_ESCAPE))
	{
		return false;
	}

	// graphics 객체의 작업을 처리
	result = m_Graphics->Frame();
	if (!result)
	{
		return false;
	}

	return true;
}

// 메세지 처리기
LRESULT CALLBACK SystemClass::MessageHandler(HWND hwnd, UINT umsg, WPARAM wparam, LPARAM lparam)
{
	switch (umsg)
	{
		// 키보드가 키가 눌렸는지 확인
	case WM_KEYDOWN:
	{
		// 키가 눌렦으면 input 객체에 정보를 전달하여 기록하도록 함
		m_Input->KeyDown((unsigned int)wparam);
		return 0;
	}

	// 키보드의 눌린 키가 떼어졌는지 확인
	case WM_KEYUP:
	{
		// 키가 떼어졌으면 input 객체에 정보를 전달하여 이 키를 해제하도록 함
		m_Input->KeyUp((unsigned int)wparam);
		return 0;
	}

	// 다른 메세지들은 사용하지 않으므로 기본 메세지 처리기에 전달
	default:
	{
		return DefWindowProc(hwnd, umsg, wparam, lparam);
	}
	}
}

// 윈도우 생성
void SystemClass::InitiallzeWindows(int& screenWidth, int& screenHeight)
{
	WNDCLASSEX wc;
	DEVMODE dmScreenSettings;
	int posX, posY;


	// 외부 포인터를 이 객체로 설정
	ApplicationHandle = this;

	// 이 어플리케이션의 인스턴스를 가져옴
	m_hinstance = GetModuleHandle(NULL);

	// 어플리케이션의 이름을 설정
	m_applicationName = L"Engine";

	// 윈도우 클래스를 기본 설정으로 맞춤
	wc.style		 = CS_HREDRAW | CS_VREDRAW | CS_OWNDC;
 	wc.lpfnWndProc	 = WndProc; wc.cbClsExtra = 0;
	wc.cbWndExtra	 = 0; wc.hInstance = m_hinstance;
	wc.hIcon		 = LoadIcon(NULL, IDI_WINLOGO);
	wc.hIconSm		 = wc.hIcon; wc.hCursor = LoadCursor(NULL, IDC_ARROW);
	wc.hbrBackground = (HBRUSH)GetStockObject(BLACK_BRUSH);
	wc.lpszMenuName	 = NULL; wc.lpszClassName = m_applicationName;
	wc.cbSize		 = sizeof(WNDCLASSEX);
	
	// 윈도우 클래스를 등록
	RegisterClassEx(&wc);

	// 모니터 화면의 해상도를 구해옴
	screenWidth  = GetSystemMetrics(SM_CXSCREEN);
	screenHeight = GetSystemMetrics(SM_CYSCREEN);

	// 풀 스크린 모드 변수의 값에 따라 화면 설정
	if (FULL_SCREEN)
	{
		// 만약 풀스크린 모드라면 화면 크기를 모니터 크기에 맞추고 색상을 32bit으로
		memset(&dmScreenSettings, 0, sizeof(dmScreenSettings));
		dmScreenSettings.dmSize		  = sizeof(dmScreenSettings);
		dmScreenSettings.dmPelsWidth  = (unsigned long)screenWidth;
		dmScreenSettings.dmPelsHeight = (unsigned long)screenHeight;
		dmScreenSettings.dmBitsPerPel = 32;
		dmScreenSettings.dmFields	  = DM_BITSPERPEL | DM_PELSWIDTH | DM_PELSHEIGHT;
	
		// 풀 스크린에 맞는 디스플레이 설정을 진행
		ChangeDisplaySettings(&dmScreenSettings, CDS_FULLSCREEN);

		// 윈도우의 위치를 화면의 왼쪽 위로 맞춤
		posX = posY = 0;;
	}
	else
	{
		screenWidth  = 800;
		screenHeight = 600;

		posX = (GetSystemMetrics(SM_CXSCREEN) - screenWidth) / 2;
		posY = (GetSystemMetrics(SM_CYSCREEN) - screenHeight) / 2;
	}

	// 설정한 것을 가지고 창을 만들어 그 핸들을 가져옴
	m_hwnd = CreateWindowEx(WS_EX_APPWINDOW, m_applicationName, m_applicationName,
		WS_CLIPSIBLINGS | WS_CLIPCHILDREN | WS_POPUP,
		posX, posY, screenWidth, screenHeight, NULL, NULL, m_hinstance, NULL);

	// 윈도우를 화면에 표시하고 포커스를 줌
	ShowWindow(m_hwnd, SW_SHOW);
	SetForegroundWindow(m_hwnd);
	SetFocus(m_hwnd);

	// 마우스 커서를 표시하지 않음
	ShowCursor(false);

	return;
}

// 윈도우 창 종료
void SystemClass::ShutdownWindows()
{
	// 마우스 커서를 표시
	ShowCursor(true);

	// 풀스크린 모드를 빠져나올 때 디스플레이 설정 변경
	if (FULL_SCREEN)
	{
		ChangeDisplaySettings(NULL, 0);
	}

	// 창을 제거
	DestroyWindow(m_hwnd);
	m_hwnd = NULL;
	
	// 어플리케이션 인스턴스를 제거
	UnregisterClass(m_applicationName, m_hinstance);
	m_hinstance = NULL;

	// 이 클래스에 대한 외부 포인터 참조를 제거
	ApplicationHandle = NULL;

	return;
}

// 
// FUNCTION PROTOTYPES
// 

//  SystemClass에서 윈도우의 메세지를 가로채게 해줌
LRESULT CALLBACK WndProc(HWND hwnd, UINT umessage, WPARAM wparam, LPARAM lparam)
{
	switch (umessage)
	{
		// 윈도우가 제거되었는지 확인
		case WM_DESTROY:
		{
			PostQuitMessage(0);
			return 0;
		}

		// 윈도우가 닫히는지 확인
		case WM_CLOSE:
		{
			PostQuitMessage(0);
			return 0;
		}

		// 다른 모든 메세지들은 system 클래스의 메세지 처리기에 전달
		default:
		{
			return ApplicationHandle->MessageHandler(hwnd, umessage, wparam, lparam);
		}
	}
}
